// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.GLFW
{
	/// <summary>
	/// <br/>
	/// This describes a custom heap memory allocator for GLFW.  To set an allocator, pass it<br/>
	/// to <br/>
	/// before initializing the library.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GLFWallocator
	{
		/// <summary>
		/// The memory allocation function.  See <br/>
		/// for details about<br/>
		/// allocation function.<br/>
		/// </summary>
		public unsafe void* Allocate;
		/// <summary>
		/// The memory reallocation function.  See <br/>
		/// for details about<br/>
		/// reallocation function.<br/>
		/// </summary>
		public unsafe void* Reallocate;
		/// <summary>
		/// The memory deallocation function.  See <br/>
		/// for details about<br/>
		/// deallocation function.<br/>
		/// </summary>
		public unsafe void* Deallocate;
		/// <summary>
		/// The user pointer for this custom allocator.  This value will be passed to the<br/>
		/// allocator functions.<br/>
		/// </summary>
		public unsafe void* User;


		public unsafe GLFWallocator(GLFWallocatefun allocate = default, GLFWreallocatefun reallocate = default, GLFWdeallocatefun deallocate = default, void* user = default)
		{
			Allocate = (void*)Marshal.GetFunctionPointerForDelegate(allocate);
			Reallocate = (void*)Marshal.GetFunctionPointerForDelegate(reallocate);
			Deallocate = (void*)Marshal.GetFunctionPointerForDelegate(deallocate);
			User = user;
		}


	}

	/// <summary>
	/// <br/>
	/// This describes a custom heap memory allocator for GLFW.  To set an allocator, pass it<br/>
	/// to <br/>
	/// before initializing the library.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct GLFWallocatorPtr : IEquatable<GLFWallocatorPtr>
	{
		public GLFWallocatorPtr(GLFWallocator* handle) { Handle = handle; }

		public GLFWallocator* Handle;

		public bool IsNull => Handle == null;

		public static GLFWallocatorPtr Null => new GLFWallocatorPtr(null);

		public GLFWallocator this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator GLFWallocatorPtr(GLFWallocator* handle) => new GLFWallocatorPtr(handle);

		public static implicit operator GLFWallocator*(GLFWallocatorPtr handle) => handle.Handle;

		public static bool operator ==(GLFWallocatorPtr left, GLFWallocatorPtr right) => left.Handle == right.Handle;

		public static bool operator !=(GLFWallocatorPtr left, GLFWallocatorPtr right) => left.Handle != right.Handle;

		public static bool operator ==(GLFWallocatorPtr left, GLFWallocator* right) => left.Handle == right;

		public static bool operator !=(GLFWallocatorPtr left, GLFWallocator* right) => left.Handle != right;

		public bool Equals(GLFWallocatorPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is GLFWallocatorPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("GLFWallocatorPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// The memory allocation function.  See <br/>
		/// for details about<br/>
		/// allocation function.<br/>
		/// </summary>
		public void* Allocate { get => Handle->Allocate; set => Handle->Allocate = value; }
		/// <summary>
		/// The memory reallocation function.  See <br/>
		/// for details about<br/>
		/// reallocation function.<br/>
		/// </summary>
		public void* Reallocate { get => Handle->Reallocate; set => Handle->Reallocate = value; }
		/// <summary>
		/// The memory deallocation function.  See <br/>
		/// for details about<br/>
		/// deallocation function.<br/>
		/// </summary>
		public void* Deallocate { get => Handle->Deallocate; set => Handle->Deallocate = value; }
		/// <summary>
		/// The user pointer for this custom allocator.  This value will be passed to the<br/>
		/// allocator functions.<br/>
		/// </summary>
		public void* User { get => Handle->User; set => Handle->User = value; }
	}

}
