// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.GLFW
{
	/// <summary>
	/// <br/>
	/// This describes a single video mode.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GLFWvidmode
	{
		/// <summary>
		/// The width, in screen coordinates, of the video mode.<br/>
		/// </summary>
		public int Width;

		/// <summary>
		/// The height, in screen coordinates, of the video mode.<br/>
		/// </summary>
		public int Height;

		/// <summary>
		/// The bit depth of the red channel of the video mode.<br/>
		/// </summary>
		public int RedBits;

		/// <summary>
		/// The bit depth of the green channel of the video mode.<br/>
		/// </summary>
		public int GreenBits;

		/// <summary>
		/// The bit depth of the blue channel of the video mode.<br/>
		/// </summary>
		public int BlueBits;

		/// <summary>
		/// The refresh rate, in Hz, of the video mode.<br/>
		/// </summary>
		public int RefreshRate;


		public unsafe GLFWvidmode(int width = default, int height = default, int redBits = default, int greenBits = default, int blueBits = default, int refreshRate = default)
		{
			Width = width;
			Height = height;
			RedBits = redBits;
			GreenBits = greenBits;
			BlueBits = blueBits;
			RefreshRate = refreshRate;
		}


	}

	/// <summary>
	/// <br/>
	/// This describes a single video mode.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct GLFWvidmodePtr : IEquatable<GLFWvidmodePtr>
	{
		public GLFWvidmodePtr(GLFWvidmode* handle) { Handle = handle; }

		public GLFWvidmode* Handle;

		public bool IsNull => Handle == null;

		public static GLFWvidmodePtr Null => new GLFWvidmodePtr(null);

		public GLFWvidmode this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator GLFWvidmodePtr(GLFWvidmode* handle) => new GLFWvidmodePtr(handle);

		public static implicit operator GLFWvidmode*(GLFWvidmodePtr handle) => handle.Handle;

		public static bool operator ==(GLFWvidmodePtr left, GLFWvidmodePtr right) => left.Handle == right.Handle;

		public static bool operator !=(GLFWvidmodePtr left, GLFWvidmodePtr right) => left.Handle != right.Handle;

		public static bool operator ==(GLFWvidmodePtr left, GLFWvidmode* right) => left.Handle == right;

		public static bool operator !=(GLFWvidmodePtr left, GLFWvidmode* right) => left.Handle != right;

		public bool Equals(GLFWvidmodePtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is GLFWvidmodePtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("GLFWvidmodePtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// The width, in screen coordinates, of the video mode.<br/>
		/// </summary>
		public ref int Width => ref Unsafe.AsRef<int>(&Handle->Width);
		/// <summary>
		/// The height, in screen coordinates, of the video mode.<br/>
		/// </summary>
		public ref int Height => ref Unsafe.AsRef<int>(&Handle->Height);
		/// <summary>
		/// The bit depth of the red channel of the video mode.<br/>
		/// </summary>
		public ref int RedBits => ref Unsafe.AsRef<int>(&Handle->RedBits);
		/// <summary>
		/// The bit depth of the green channel of the video mode.<br/>
		/// </summary>
		public ref int GreenBits => ref Unsafe.AsRef<int>(&Handle->GreenBits);
		/// <summary>
		/// The bit depth of the blue channel of the video mode.<br/>
		/// </summary>
		public ref int BlueBits => ref Unsafe.AsRef<int>(&Handle->BlueBits);
		/// <summary>
		/// The refresh rate, in Hz, of the video mode.<br/>
		/// </summary>
		public ref int RefreshRate => ref Unsafe.AsRef<int>(&Handle->RefreshRate);
	}

}
