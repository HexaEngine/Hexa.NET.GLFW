// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.GLFW
{
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CrtMultibyteData
	{


	}

	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct CrtMultibyteDataPtr : IEquatable<CrtMultibyteDataPtr>
	{
		public CrtMultibyteDataPtr(CrtMultibyteData* handle) { Handle = handle; }

		public CrtMultibyteData* Handle;

		public bool IsNull => Handle == null;

		public static CrtMultibyteDataPtr Null => new CrtMultibyteDataPtr(null);

		public CrtMultibyteData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator CrtMultibyteDataPtr(CrtMultibyteData* handle) => new CrtMultibyteDataPtr(handle);

		public static implicit operator CrtMultibyteData*(CrtMultibyteDataPtr handle) => handle.Handle;

		public static bool operator ==(CrtMultibyteDataPtr left, CrtMultibyteDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(CrtMultibyteDataPtr left, CrtMultibyteDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(CrtMultibyteDataPtr left, CrtMultibyteData* right) => left.Handle == right;

		public static bool operator !=(CrtMultibyteDataPtr left, CrtMultibyteData* right) => left.Handle != right;

		public bool Equals(CrtMultibyteDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is CrtMultibyteDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("CrtMultibyteDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
	}

}
